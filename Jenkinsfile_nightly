#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    pipelineTriggers([cron('H 8 * * 1-5')]),
    parameters([
        string(name: 'URL_TO_TEST', defaultValue: 'http://ia-timed-event-service-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
        string(name: 'SecurityRules',
            defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
            description: 'The URL you want to run these tests against'),
    ])
])

@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ia"
def component = "timed-event-service"

def secrets = [
    'ia-${env}': [

        secret('idam-client-id', 'IA_IDAM_CLIENT_ID'),
        secret('idam-secret', 'IA_IDAM_SECRET'),
        secret('idam-redirect-uri', 'IA_IDAM_REDIRECT_URI'),
        secret('s2s-secret', 'IA_S2S_SECRET'),
        secret('s2s-microservice', 'IA_S2S_MICROSERVICE'),
        secret('system-username', 'IA_SYSTEM_USERNAME'),
        secret('system-password', 'IA_SYSTEM_PASSWORD'),

        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-a-username', 'TEST_LAW_FIRM_A_USERNAME'),
        secret('test-law-firm-a-password', 'TEST_LAW_FIRM_A_PASSWORD'),
        secret('test-homeoffice-lart-username', 'TEST_HOMEOFFICE_LART_USERNAME'),
        secret('test-homeoffice-lart-password', 'TEST_HOMEOFFICE_LART_PASSWORD'),

        secret('ia-config-validator-secret', 'IA_CONFIG_VALIDATOR_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.Rules = params.SecurityRules
    env.SecurityRules = params.SecurityRules

    env.CCD_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-web-public.aat.platform.hmcts.net"
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_GW_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.DM_URL = "http://dm-store-aat.service.core-compute-aat.internal"

    loadVaultSecrets(secrets)

//    enableFortifyScan()
    enableSecurityScan()
    enableMutationTest()
    enableSlackNotifications('#ia-tech')
    enableFullFunctionalTest()

    after('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    before('fullFunctionalTest') {
        try {
            builder.gradle('test')
            builder.gradle('integration')
            builder.gradle('smoke')
        } finally {
            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/test",
                    reportFiles          : "index.html",
                    reportName           : "IAC Timed Event Service Unit Test Report"
            ]
            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/smoke",
                    reportFiles          : "index.html",
                    reportName           : "IAC Timed Event Service Smoke Test Report"
            ]
            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/integration",
                    reportFiles          : "index.html",
                    reportName           : "IAC Timed Event Service Integration Test Report"
            ]
            junit '**/test-results/**/*.xml'
        }
    }
    afterAlways('mutationTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/pitest",
                reportFiles          : 'index.html',
                reportName           : 'IAC Timed Event Service Mutation Test Report'
        ])
    }
    afterAlways('fullFunctionalTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : 'index.html',
                reportName           : 'IAC Timed Event Service Functional Test Report'
        ])

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/**/*'
    }

}
