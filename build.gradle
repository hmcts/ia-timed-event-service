buildscript {
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:3.6.22")
    classpath("au.com.dius.pact:au.com.dius.pact.gradle.plugin:4.4.0-beta.1")
  }
}


plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.springframework.boot' version '2.7.18'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'org.owasp.dependencycheck' version '10.0.3'
  id 'com.github.ben-manes.versions' version '0.50.0'
  id 'org.sonarqube' version '4.3.0.3225'
  id "io.freefair.lombok" version "6.6.3"
  id 'org.flywaydb.flyway' version '5.2.4'
  id "info.solidsoft.pitest" version '1.15.0'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.serenity-gradle-plugin'
apply plugin: 'project-report'
apply plugin: 'idea'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '17'
  targetCompatibility = '17'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task fortifyScan(type: JavaExec, description: 'Run fortify scan.')  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
      'category/java/errorprone.xml',
      'category/java/bestpractices.xml'
  ]
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required.set(true)
    csv.required.set(false)
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ia-timed-event-service"
    property "sonar.projectKey", "IATIMEDEVENTSERVICE"
    property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/timedevent/infrastructure/config/**"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

pitest {
  junit5PluginVersion = '1.2.1'
  targetClasses = ['uk.gov.hmcts.reform.timedevent.*']
  excludedClasses = [
      'uk.gov.hmcts.reform.timedevent.infrastructure.config.*',
      'uk.gov.hmcts.reform.timedevent.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
  verbose = true
  mutationThreshold = 55
}

project.tasks['pitest'].group = "Verification"

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
        }
      }
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '32.1.2-jre') {
      entry 'guava'
    }

    dependencySet(group: 'commons-fileupload', version: '1.6.0') {
      entry 'commons-fileupload'
    }

    //CVE-2022-38750, CVE-2022-38751, CVE-2022-38752
    dependency group: 'org.yaml', name: 'snakeyaml', version: '2.2'

    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.16.0') {
      entry 'jackson-databind'
      entry 'jackson-core'
      entry 'jackson-annotations'
    }

    dependencySet(group: 'com.fasterxml.jackson.dataformat', version: '2.16.0') {
      entry 'jackson-dataformat-yaml'
    }

    dependencySet(group: 'com.fasterxml.jackson.datatype', version: '2.16.0') {
      entry 'jackson-datatype-jsr310'
      entry 'jackson-datatype-jdk8'
    }

    dependencySet(group: 'com.fasterxml.jackson.module', version: '2.16.0') {
      entry 'jackson-module-parameter-names'
      entry 'jackson-module-afterburner'
    }

  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

def versions = [
    junit           : '5.10.1',
    junitPlatform   : '1.10.1',
    reformLogging   : '6.0.1',
    springDoc       : '1.7.0',
    serenity        : '3.9.8',
    sonarPitest     : '0.5',
    pitest          : '1.15.3',
    restAssured     : '5.3.2'
]

ext.libraries = [
    junit5: [
        "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
        "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
        "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
        "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
        "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
    ]
]

dependencies {
  modules {
    module("org.codehaus.groovy:groovy") {
      replacedBy("org.apache.groovy:groovy", "conflicts in current rest-assured version")
    }
    module("org.codehaus.groovy:groovy-xml") {
      replacedBy("org.apache.groovy:groovy-xml", "conflicts in current rest-assured version")
    }
    module("org.codehaus.groovy:groovy-json") {
      replacedBy("org.apache.groovy:groovy-json", "conflicts in current rest-assured version")
    }
  }

  implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.5.0-rc1'

  implementation group: 'org.apiguardian', name:'apiguardian-api', version: '1.1.2'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-quartz') {
    exclude group: 'org.quartz-scheduler', module: 'quartz'
  }
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'

  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.2'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc

  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.13'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'


  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation(group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.2') {
      exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.8') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap' , version: '3.1.7') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.74'
  implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.9'

  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
  implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine'
  testImplementation libraries.junit5
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.106'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.106'

  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.37.3'

  implementation group: 'net.minidev', name: 'json-smart', version: '2.5.2'

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude group: 'junit', module: 'junit'
    exclude group: "com.vaadin.external.google", module: "android-json"
  }

  testImplementation group: 'org.springframework.security', name: 'spring-security-test'

  testImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.1'

  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.15.0"
  testImplementation "org.codehaus.sonar-plugins:sonar-pitest-plugin:${versions.sonarPitest}"

  testImplementation(group: 'io.rest-assured', name: 'rest-assured-all', version: versions.restAssured)
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  testImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.8') {
    exclude group: "com.github.tomakehurst", module: "wiremock-standalone"
  }

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.3.0', classifier: 'all', {
    exclude group: 'commons-io', module: 'commons-io'
    exclude group: 'org.apache.commons', module: 'commons-lang3'
  }
  annotationProcessor 'org.projectlombok:lombok:1.18.30'
  implementation 'org.projectlombok:lombok:1.18.30'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

}

test {
  useJUnitPlatform()
}

mainClassName = 'uk.gov.hmcts.reform.timedevent.Application'

bootJar {
  getArchiveFileName().set(provider {
    'ia-timed-event-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
